@model BAL.Model.CreateProductModel

@{
    ViewData["Title"] = "CreateProduct";
    Layout = "~/Views/Shared/LayoutClient.cshtml";
}

<div class="breadbg">
    <div class="container">
        <div class="row">
            <ul class="breadcrumb">
                <li>
                    <a href="@Url.ActionLink("Index","Home")">
                        <i class="fa fa-home"></i>
                    </a>
                </li>
                <li>
                    <a href="@Url.ActionLink("ListProduct","Product")">List Product</a>
                </li>
            </ul>
        </div>
    </div>
</div>
<div id="product-category" class="container cleft">
    <div class="row">
        <aside id="column-left" class="col-sm-4 col-md-3 col-xs-12 hidden-xs">
            <div class="list-group catlistpage hidden-xs">
                <div class="panel-heading cathed">category</div>

                <a href="@Url.ActionLink("ListProduct","Product")"
                   class="list-group-item active">Create Product</a>
            </div>
        </aside>
        <div id="content" class="col-sm-8 col-md-9 col-xs-12 colright">
            <div class="cate-top row hidden-xs">
                <div class="row">
                    <div class="col-md-5 col-lg-2 hidden-sm">
                        <img src="~/client/image/cache/catalog/category/5-120x120.png"
                             alt="meats &amp; sea foods"
                             title="meats &amp; sea foods"
                             class="img-responsive center-block" />
                    </div>
                    <div class="col-md-7 col-sm-12 col-lg-10 col-xs-12 ">
                        <p>
                            The product list includes every item in the store, displaying product names, descriptions
                            , images, prices, and availability.The admin can easily edit product details,
                            view sales history, and delete products as needed.The interface is user-friendly and responsive,
                            making product management a breeze.
                        </p>
                    </div>
                </div>
            </div>
           @* <form method="post" action="CreateProduct" class="mt-5" onsubmit="return validateForm()">
                
                    <div class="form-row">
                    <div class="form-group col-mb-3">
                    <label for="" class="form-label">Name</label>
                    <input type="text" class="form-control" asp-for="Name">
                </div>
                    <div class="form-group col-mb-3">
                    <label for="" class="form-label">Price</label>
                    <input type="number" class="form-control" asp-for="Price">
                </div>
                </div>
                <div class="mb-3">
                    <label for="" class="form-label">imgPath</label>
                    <input type="text" class="form-control" asp-for="imgPath">
                </div>
                <div class="mb-3">
                    <label for="" class="form-label">isAvailable</label>
                    <input type="checkbox" class="form-control" asp-for="isAvailable">
                </div>
                <div class="mb-3">
                    <label for="" class="form-label">isDeleted</label>
                    <input type="checkbox"  class="form-control" asp-for="isDeleted">
                </div>

                <button type="submit" class="btn btn-primary">Submit</button>
   
            </form>*@

            <form method="post" action="CreateProduct" class="mt-5 needs-validation" novalidate>
                <div class="form-row">
                    <div class="form-group col-md-6">
                        <label asp-for="Name" class="control-label"></label>
                        <input type="text" class="form-control" id="Name" name="Name" asp-for="Name" required>
                         
                        
                        <span asp-validation-for="Name" class="text-danger"></span>
                    </div>
                    <div class="form-group col-md-6">
                        <label for="Price" class="form-label">Price</label>
                        <div class="input-group">
                           
                            <input type="number" class="form-control" id="Price" name="Price" asp-for="Price" required pattern="\d+(\.\d{2})?" title="Please enter a valid price" >
                        </div>

                    </div>
                </div>
                <div class="form-group">
                    <label for="imgPath" class="form-label">Image Path</label>
                    <input type="text" class="form-control" id="imgPath" name="imgPath" asp-for="imgPath">
                </div>
                <div class="form-group">
                    <label for="imgPath" class="form-label">Category ID</label>
                    <input type="text" class="form-control" id="CategoryID" name="CategoryID" asp-for="CategoryID">
                </div>
             
                <div class="form-check">
                    <input type="checkbox" class="form-check-input" id="isAvailable" name="isAvailable" asp-for="isAvailable">
                    <label class="form-check-label" for="isAvailable">Available</label>
                </div>
                <div class="form-check">
                    <input type="checkbox" class="form-check-input" id="isDeleted" name="isDeleted" asp-for="isDeleted">
                    <label class="form-check-label" for="isDeleted">Deleted</label>
                </div>

                <button type="submit" class="btn btn-primary mt-3">Submit</button>
            </form>

            <style>
                .form-control:invalid {
                    border-color: #dc3545;
                }
            </style>

            <script>
                (function () {
                    'use strict'

                    // Fetch all the forms we want to apply custom Bootstrap validation styles to
                    var forms = document.querySelectorAll('.needs-validation')

                    // Loop over them and prevent submission
                    Array.prototype.slice.call(forms)
                        .forEach(function (form) {
                            form.addEventListener('submit', function (event) {
                                if (!form.checkValidity()) {
                                    event.preventDefault()
                                    event.stopPropagation()
                                }

                                form.classList.add('was-validated')
                            }, false)
                        })
                })()
            </script>
            <script>
  // Get the input fields and invalid feedback elements
  const nameInput = document.getElementById('Name');
  const priceInput = document.getElementById('Price');
  const nameInvalidFeedback = nameInput.nextElementSibling;
  const priceInvalidFeedback = priceInput.nextElementSibling;

  // Hide the invalid feedback when the user starts typing in the input field
  nameInput.addEventListener('input', function () {
    if (nameInput.checkValidity()) {
      nameInvalidFeedback.style.display = 'none';
    }
  });

  priceInput.addEventListener('input', function () {
    if (priceInput.checkValidity()) {
      priceInvalidFeedback.style.display = 'none';
    }
  });
</script>

        </div>
    </div>
</div>

